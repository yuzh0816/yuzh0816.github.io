<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>平分子集</title>
    <url>/2020/01/02/Bisection_Subset/</url>
    <content><![CDATA[<h5 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a><a href="https://blog.csdn.net/zhangfei2018/article/details/8107514">参考博客</a></h5><h4 id=""><a href="#" class="headerlink" title=""></a><img src="http://5.135.58.179:7009/pictures/pro_pics/p40/1.PNG" alt="题目描述"></h4><p><strong>对于从1到N的连续整集合，划分为两个子集合，且保证每个集合的数字和是相等的。因而，划分之后每个子集全的数字应该为n<em>(n+1)/2的一半，即n</em>(n+1)/4由于两个子集中都是整数，所以n<em>(n+1)必为偶数，则可以设s=n</em>(n+1),并判断s%4 .则，s/=4是划分之后子集合的数字和；dyn[i]数组表示任意个数加起来等于i的组数。</strong></p>
<a id="more"></a>

<p>题解如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans[<span class="number">100</span>];</span><br><span class="line">	<span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="number">100</span>);</span><br><span class="line">	<span class="keyword">int</span> n,s;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	s=n*(n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span>(s%<span class="number">4</span>!=<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	s/=<span class="number">4</span>;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	ans[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(j=s;j&gt;=i;j--)</span><br><span class="line">			ans[j]+=ans[j-i];</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;ans[s]/<span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>辗转相除法</title>
    <url>/2020/01/02/Euclidean_Algorithm/</url>
    <content><![CDATA[<h2 id="什么是辗转相除法"><a href="#什么是辗转相除法" class="headerlink" title="什么是辗转相除法"></a>什么是辗转相除法</h2><p>欧几里德算法又称辗转相除法，是指用于计算两个正整数a，b的最大公约数。</p>
<p><a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95/1647675?fromtitle=%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95&fromid=4625352">From Baidu</a></p>
<h2 id="辗转相除法递归式"><a href="#辗转相除法递归式" class="headerlink" title="辗转相除法递归式"></a>辗转相除法递归式</h2><p><strong>gcd(a,b) = gcd(b,a mod b)</strong></p>
<a id="more"></a>

<h2 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h2><p>a可以表示成a = kb + r（a，b，k，r皆为正整数，且r&lt;b），则r = a mod b</p>
<p>假设d是a,b的一个公约数，记作d|a,d|b，即a和b都可以被d整除。</p>
<p>而r = a - kb，两边同时除以d，r/d=a/d-kb/d=m，由等式右边可知m为整数，因此d|r</p>
<p>因此d也是b,a mod b的公约数</p>
<p>假设d是b,a mod b的公约数, 则d|b,d|(a-k*b),k是一个整数。</p>
<p>进而d|a.因此d也是a,b的公约数</p>
<p>因此(a,b)和(b,a mod b)的公约数是一样的，其最大公约数也必然相等，得证。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>上代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        r = m % n;</span><br><span class="line">        m = n;</span><br><span class="line">        n = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;gcd(a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂</title>
    <url>/2020/01/02/Fast_Exponentiation/</url>
    <content><![CDATA[<p>简单记录快速幂原理</p>
<p>以a^11为例：</p>
<p>11的二进制数为1011，二进制从右向左算，但乘出来的顺序是 a^(2^0)*a^(2^1)*a^(2^3)，是从左向右的。我们不断的让base *= base目的是累乘，以便随时对ans做出贡献。</p>
<p>要理解base *= base这一步：因为base * base == base ^ 2，下一步再乘，就是(base ^ 2) * (base ^ 2) == base ^ 4，然后同理(base ^ 4) * (base ^ 4) == base ^ 8，由此可以做到base  base ^ 2  base ^ 4  base ^ 8  base ^ 16  base ^ 32…….指数正好是 2 ^ i 。再看上面的例子，a= (a ^ 1) * (a ^ 2) * (a ^ 8)，这三项就可以完美解决了，快速幂就是这样。</p>
<a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x,y,ans;<span class="comment">//Bottom_Number,Time,Answer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span><span class="comment">//Quick Power</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>,cnt=a;</span><br><span class="line">    <span class="keyword">while</span>(b)<span class="comment">//Cacluate Answer</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)<span class="comment">//b is an odd number</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans*=cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        cnt*=cnt;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;<span class="comment">//AS b=b/2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qp2</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> r=<span class="number">1</span>,base=a;</span><br><span class="line">    <span class="keyword">while</span>(b!=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b%<span class="number">2</span>) r*=base;</span><br><span class="line">    base*=base;</span><br><span class="line">    b/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;y;</span><br><span class="line">    ans=qp(x,y);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本文参考<a href="https://blog.csdn.net/liangllhahaha/article/details/82119378">@LL_Leung</a></p>
]]></content>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>Hanoi</title>
    <url>/2020/01/02/Hanoi/</url>
    <content><![CDATA[<p>河内塔(Towers of Hanoi)是法国人M.Claus(Lucas)于1883年从泰国带至法国的，河内之塔为越战时北越的首都<br>，即现在的胡志明市；1883年法国数学家Edouar Lucas曾提及这个故事，据说创世纪时Benares有一座波罗教塔，<br>是由三支钻石棒所支撑，开始时神在第一根棒上放置64个由上至下依由小到大排列的金盘(Disc)，并命令僧侣将<br>所有的金盘从第一根石棒移至第三根石棒，且搬运过程中遵守大盘子在小盘子之下的原则，若每日仅搬一个盘子，<br>则当盘子全数搬运完毕之时，此塔将毁损，而也就是世界末日的来临之时。</p>
<p>解法：<br>如果柱子标为ABC，要由A搬至C，在只有一个盘子时，就将它直接搬至C，当有两个盘子，就将B当作辅助柱。如果<br>盘数超过两个，将第三个以下的盘子遮起来，就很简单了，每次处理两个盘子，也就是：A-&gt;B，A-&gt;C，B-&gt;C这三个<br>步骤，而被遮住的部分，其实就是进入程式的递回处理。事实上，若有n个盘子，则先移动完毕所需次数为(2^n)-1，<br>所以当盘数为64时，则所需次数为(2^64)-1 = 18446744073709551615为5.05390248594782e+16年，也就是约5000<br>世纪，如果对这数字没什么概念，就假设每秒钟搬一个盘子好了，也要5850亿年左右。 </p>
<a id="more"></a>

<p>C++解法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> A, <span class="keyword">int</span> B, <span class="keyword">int</span> C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Move sheet %d from %c to %c\n&quot;</span>, n, A, C);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hanoi(n<span class="number">-1</span>, A, C, B);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Move sheet %d from %c to %c\n&quot;</span>, n, A, C);</span><br><span class="line">        hanoi(n<span class="number">-1</span>, B, A, C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入盘数: \n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    hanoi(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT! Hello World.</title>
    <url>/2020/07/17/NexT_hello_world/</url>
    <content><![CDATA[<h1 id="博客全新改版"><a href="#博客全新改版" class="headerlink" title="博客全新改版"></a>博客全新改版</h1><h2 id="博客主要更新"><a href="#博客主要更新" class="headerlink" title="博客主要更新"></a>博客主要更新</h2><a id="more"></a>

<h3 id="更换主题为NexT"><a href="#更换主题为NexT" class="headerlink" title="更换主题为NexT"></a>更换主题为NexT</h3><h3 id="更换域名为blog-hexoian-cn"><a href="#更换域名为blog-hexoian-cn" class="headerlink" title="更换域名为blog.hexoian.cn"></a>更换域名为blog.hexoian.cn</h3>]]></content>
  </entry>
  <entry>
    <title>P1000 超级玛丽游戏</title>
    <url>/2020/01/02/P1001/</url>
    <content><![CDATA[<h1 id="直接贴代码"><a href="#直接贴代码" class="headerlink" title="直接贴代码"></a>直接贴代码</h1><a id="more"></a>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">    <span class="string">&quot;                ********\n&quot;</span></span><br><span class="line">    <span class="string">&quot;               ************\n&quot;</span></span><br><span class="line">    <span class="string">&quot;               ####....#.\n&quot;</span></span><br><span class="line">    <span class="string">&quot;             #..###.....##....\n&quot;</span></span><br><span class="line">    <span class="string">&quot;             ###.......######              ###            ###\n&quot;</span></span><br><span class="line">    <span class="string">&quot;                ...........               #...#          #...#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;               ##*#######                 #.#.#          #.#.#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;            ####*******######             #.#.#          #.#.#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;           ...#***.****.*###....          #...#          #...#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;           ....**********##.....           ###            ###\n&quot;</span></span><br><span class="line">    <span class="string">&quot;           ....****    *****....\n&quot;</span></span><br><span class="line">    <span class="string">&quot;             ####        ####\n&quot;</span></span><br><span class="line">    <span class="string">&quot;           ######        ######\n&quot;</span></span><br><span class="line">    <span class="string">&quot;##############################################################\n&quot;</span></span><br><span class="line">    <span class="string">&quot;#...#......#.##...#......#.##...#......#.##------------------#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;###########################################------------------#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;#..#....#....##..#....#....##..#....#....#####################\n&quot;</span></span><br><span class="line">    <span class="string">&quot;##########################################    #----------#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;#.....#......##.....#......##.....#......#    #----------#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;##########################################    #----------#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;#.#..#....#..##.#..#....#..##.#..#....#..#    #----------#\n&quot;</span></span><br><span class="line">    <span class="string">&quot;##########################################    ############\n&quot;</span></span><br><span class="line">    );<span class="comment">//输出样例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P1009 阶乘之和</title>
    <url>/2020/01/02/P1009/</url>
    <content><![CDATA[<p>此题<strong>最简单</strong>的方法，其实前面已经有大佬<a href="https://www.luogu.org/user/69196">@SocietyNiu</a>讲过了，就是用<strong>Python</strong>做一个简单的打表</p>
<p>步骤</p>
<ol>
<li>先输入打表后的数据</li>
<li>输入数据</li>
<li>输出表中的答案</li>
</ol>
<a id="more"></a>

<p>贴上代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a[<span class="number">60</span>]=&#123;<span class="string">&quot;0&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;33&quot;</span>,<span class="string">&quot;153&quot;</span>,<span class="string">&quot;873&quot;</span>,<span class="string">&quot;5913&quot;</span>,<span class="string">&quot;46233&quot;</span>,<span class="string">&quot;409113&quot;</span>,<span class="string">&quot;4037913&quot;</span>,<span class="string">&quot;43954713&quot;</span>,<span class="string">&quot;522956313&quot;</span>,<span class="string">&quot;6749977113&quot;</span>,<span class="string">&quot;93928268313&quot;</span>,<span class="string">&quot;1401602636313&quot;</span>,<span class="string">&quot;22324392524313&quot;</span>,<span class="string">&quot;378011820620313&quot;</span>,<span class="string">&quot;6780385526348313&quot;</span>,<span class="string">&quot;128425485935180313&quot;</span>,<span class="string">&quot;2561327494111820313&quot;</span>,<span class="string">&quot;53652269665821260313&quot;</span>,<span class="string">&quot;1177652997443428940313&quot;</span>,<span class="string">&quot;27029669736328405580313&quot;</span>,<span class="string">&quot;647478071469567844940313&quot;</span>,<span class="string">&quot;16158688114800553828940313&quot;</span>,<span class="string">&quot;419450149241406189412940313&quot;</span>,<span class="string">&quot;11308319599659758350180940313&quot;</span>,<span class="string">&quot;316196664211373618851684940313&quot;</span>,<span class="string">&quot;9157958657951075573395300940313&quot;</span>,<span class="string">&quot;274410818470142134209703780940313&quot;</span>,<span class="string">&quot;8497249472648064951935266660940313&quot;</span>,<span class="string">&quot;271628086406341595119153278820940313&quot;</span>,<span class="string">&quot;8954945705218228090637347680100940313&quot;</span>,<span class="string">&quot;304187744744822368938255957323620940313&quot;</span>,<span class="string">&quot;10637335711130967298604907294846820940313&quot;</span>,<span class="string">&quot;382630662501032184766604355445682020940313&quot;</span>,<span class="string">&quot;14146383753727377231082583937026584420940313&quot;</span>,<span class="string">&quot;537169001220328488991089808037100875620940313&quot;</span>,<span class="string">&quot;20935051082417771847631371547939998232420940313&quot;</span>,<span class="string">&quot;836850334330315506193242641144055892504420940313&quot;</span>,<span class="string">&quot;34289376947494122614363304694584807557656420940313&quot;</span>,<span class="string">&quot;1439295494700374021157505910939096377494040420940313&quot;</span>,<span class="string">&quot;61854558558074209658512637979453093884758552420940313&quot;</span>,<span class="string">&quot;2720126133346522977702138448994068984204397080420940313&quot;</span>,<span class="string">&quot;122342346998826717539665299944651784048588130840420940313&quot;</span>,<span class="string">&quot;5624964506810915667389970728744906677010239883800420940313&quot;</span>,<span class="string">&quot;264248206017979096310354325882356886646207872272920420940313&quot;</span>,<span class="string">&quot;12678163798554051767172643373255731925167694226950680420940313&quot;</span>,<span class="string">&quot;620960027832821612639424806694551108812720525606160920420940313&quot;</span>,<span class="string">&quot;31035053229546199656252032972759319953190362094566672920420940313&quot;</span>&#125;;<span class="comment">//此处为超水打表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> n;</span><br><span class="line">      <span class="built_in">cin</span>&gt;&gt;n;<span class="comment">//读入他想让你计算的和</span></span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;a[n];<span class="comment">//输出答案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面附上<strong>Python</strong>打表源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ans=<span class="number">1</span></span><br><span class="line">k=<span class="number">2</span></span><br><span class="line">last=<span class="number">1</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">while</span> k&lt;=n:</span><br><span class="line">    last*=i</span><br><span class="line">    <span class="built_in">sum</span>+=last</span><br><span class="line">    k+=<span class="number">1</span></span><br><span class="line">    f.write(<span class="string">&#x27;&quot;&#x27;</span>)</span><br><span class="line">    f.write(<span class="built_in">str</span>(ans))</span><br><span class="line">    f.write(<span class="string">&#x27;&quot;,&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>配上AC链接<a href="https://www.luogu.org/record/24483665">yuzh0816 的 AC记录</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P1044</title>
    <url>/2020/01/02/P1044/</url>
    <content><![CDATA[<h1 id="卡特兰数经典例题"><a href="#卡特兰数经典例题" class="headerlink" title="卡特兰数经典例题"></a>卡特兰数经典例题</h1><h3 id="原题链接：栈"><a href="#原题链接：栈" class="headerlink" title="原题链接：栈"></a>原题链接：<a href="https://www.luogu.org/problem/P1044">栈</a></h3><h3 id="解决方法：-Catalan-Number"><a href="#解决方法：-Catalan-Number" class="headerlink" title="解决方法： Catalan Number"></a>解决方法： <em><strong>Catalan Number</strong></em></h3><p>为何是卡特兰数？解释原理：</p>
<p>x为最后一个出栈的，可以将原来的栈分为两部分</p>
<a id="more"></a>

<ul>
<li><p>小于x(x-1个)</p>
</li>
<li><p>大于x(n-x个)</p>
</li>
</ul>
<p>排列后可得x的取值为catalan[x]=catalan[x-1]*catalan[n-x]</p>
<p>直接动归 可得 ans=catalan[0]<em>catalan[n-1]+catalan[1]catalan[n-2]+…+catalan[n-1]</em>catalan[0]</p>
<p>上述语句即为卡特兰数的公式</p>
<p>参见<a href="https://baike.baidu.com/item/%E5%8D%A1%E7%89%B9%E5%85%B0%E6%95%B0/6125746?fr=aladdin">百度百科</a><br><img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike80%2C5%2C5%2C80%2C26/sign=1cfe77909d0a304e462fa8a8b0a1cce3/4d086e061d950a7be3e94d5000d162d9f3d3c942.jpg" alt="卡特兰数_百度百科"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//P1044     Stack</span></span><br><span class="line"><span class="comment">//SOLUTION: Catalan Number</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,ans;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> catalan[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	catalan[<span class="number">0</span>]=<span class="number">1</span>;catalan[<span class="number">1</span>]=<span class="number">1</span>;catalan[<span class="number">2</span>]=<span class="number">2</span>;<span class="comment">//定义卡特兰数前几个数的值</span></span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=n<span class="number">-1</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			catalan[i]+=catalan[j]*catalan[i-j<span class="number">-1</span>];<span class="comment">//计算需要的卡特兰数</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;catalan[n];<span class="comment">//输出答案</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本片题解基于 @inexistent改编</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P3916 图的遍历</title>
    <url>/2020/06/03/P3916/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>题目见下，来自洛谷</p>
<p><img src="https://i.loli.net/2020/06/04/Rvqa5AQrxnEl3pb.png" alt="题目"></p>
<a id="more"></a>

<p>思路比较简单</p>
<ol>
<li>反向建边</li>
<li>dfs寻找答案</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;<span class="comment">//N个点，MM条边的有向图</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; M[maxn];<span class="comment">//建立一张图</span></span><br><span class="line"><span class="keyword">int</span> f[maxn],vis[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[x]=id;</span><br><span class="line">    cnt++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M[x].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=M[x][i];</span><br><span class="line">        <span class="keyword">if</span>(!vis[t])</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(t,id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,a,b;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        M[b].push_back(a);<span class="comment">//建边</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span> &amp;&amp; cnt&lt;n;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(i,i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;vis[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P1113 杂物</title>
    <url>/2020/05/31/P1113/</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>John的农场在给奶牛挤奶前有很多杂务要完成，每一项杂务都需要一定的时间来完成它。比如：他们要将奶牛集合起来，将他们赶进牛棚，为奶牛清洗乳房以及一些其它工作。尽早将所有杂务完成是必要的，因为这样才有更多时间挤出更多的牛奶。当然，有些杂务必须在另一些杂务完成的情况下才能进行。比如：只有将奶牛赶进牛棚才能开始为它清洗乳房，还有在未给奶牛清洗乳房之前不能挤奶。我们把这些工作称为完成本项工作的准备工作。至少有一项杂务不要求有准备工作，这个可以最早着手完成的工作，标记为杂务11。John有需要完成的nn个杂务的清单，并且这份清单是有一定顺序的，杂务k(k&gt;1)k(k&gt;1)的准备工作只可能在杂务11至k-1k−1中。</p>
<p>写一个程序从11到nn读入每个杂务的工作说明。计算出所有杂务都被完成的最短时间。当然互相没有关系的杂务可以同时工作，并且，你可以假定John的农场有足够多的工人来同时完成任意多项任务。</p>
<a id="more"></a>

<h1 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h1><p>第1行：一个整数nn，必须完成的杂务的数目(3 \le n \le 10,0003≤n≤10,000)；</p>
<p>第22至(n+1)(n+1)行： 共有nn行，每行有一些用11个空格隔开的整数，分别表示：</p>
<ul>
<li><p>工作序号(11至nn,在输入文件中是有序的)；</p>
</li>
<li><p>完成工作所需要的时间len(1 \le len \le 100)len(1≤len≤100)；</p>
</li>
<li><p>一些必须完成的准备工作，总数不超过100100个，由一个数字00结束。有些杂务没有需要准备的工作只描述一个单独的00，整个输入文件中不会出现多余的空格。</p>
</li>
</ul>
<h1 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h1><p>一个整数，表示完成所有杂务所需的最短时间。</p>
<h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">7</span><br><span class="line">1 5 0</span><br><span class="line">2 2 1 0</span><br><span class="line">3 3 2 0</span><br><span class="line">4 6 1 0</span><br><span class="line">5 1 2 4 0</span><br><span class="line">6 8 2 4 0</span><br><span class="line">7 4 3 5 6 0</span><br></pre></td></tr></table></figure>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure>
<p>一道拓扑排序（dfs实现）</p>
<p>代码见下，含有注释</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;<span class="comment">//数组最大值</span></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//n表示必须完成的杂务的数目</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; M[maxn];<span class="comment">//建立的图</span></span><br><span class="line"><span class="keyword">int</span> ru[maxn],tim[maxn],dp[maxn],ans=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//  ru为入度 tim为时间  dp为递推结果 最终答案为ans</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;<span class="comment">//建立队列</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//扫描队列</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!ru[i])<span class="comment">//入度为零，放入队列</span></span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(i);</span><br><span class="line">            dp[i]=tim[i];<span class="comment">//记i点的递推值为i点的时间</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())<span class="comment">//当队列不为空时</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> hd=Q.front();<span class="comment">//取出队列头</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M[hd].size();i++)<span class="comment">//扩展队列头</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=M[hd][i];<span class="comment">//t为下一个点</span></span><br><span class="line">            dp[t]=max(dp[t],dp[hd]+tim[t]);</span><br><span class="line">            ru[t]--;<span class="comment">//把t的入度缩小</span></span><br><span class="line">            <span class="keyword">if</span>(ru[t]==<span class="number">0</span>)<span class="comment">//入度为零</span></span><br><span class="line">            &#123;</span><br><span class="line">                Q.push(t);<span class="comment">//入队</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Q.pop();<span class="comment">//把上面的队列弹出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,a,b,c;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        tim[a]=b;<span class="comment">//a任务完成的时间为b</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;c;<span class="comment">//前置任务</span></span><br><span class="line">        <span class="keyword">while</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">            M[c].push_back(a);<span class="comment">//把c和a之间建立一条边</span></span><br><span class="line">            ru[a]++;<span class="comment">//入度增加</span></span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c;<span class="comment">//不断输入</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    bfs();<span class="comment">//进入递归</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=max(ans,dp[i]);<span class="comment">//求出dp的最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P5076 【深基16.例7】普通二叉树（简化版）</title>
    <url>/2020/07/10/P5076/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://i.loli.net/2020/07/09/tQagoDJYXp53h7x.png" alt="题目"></p>
<p>不多赘述，直接看代码吧</p>
<a id="more"></a>

<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,sum;<span class="comment">//l,r为左右节点的号码，sum为该节点作为子树的数量</span></span><br><span class="line">    <span class="keyword">int</span> val,cnt;<span class="comment">//值，出现次数</span></span><br><span class="line">&#125;ltt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lst=<span class="number">0</span>,root; <span class="comment">//lst最后一个节点的位置，控制ltt，root为根（ltt的位置，开始时不存在）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//预定义宏，懒人专用。</span></span><br><span class="line"><span class="comment">//ltt中的x随着ls中的x变化而变化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(x) ltt[x].l</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(x) ltt[x].r</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(Node &amp;f,Node ls,Node rs)</span><span class="comment">//insert后的操作（提升操作）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f.sum=f.cnt+ls.sum+rs.sum;<span class="comment">//重复次数加上左右节点的数值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//动态开点（点为0，直接开点）</span></span><br><span class="line">    <span class="keyword">if</span>(!p)<span class="comment">//节点编号为0</span></span><br><span class="line">    &#123;</span><br><span class="line">        p=++lst;<span class="comment">//root=+lst</span></span><br><span class="line">        ltt[p].val=x; ltt[p].cnt=<span class="number">1</span>; ltt[p].sum=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ltt[p].val==x)<span class="comment">//重复情况，数值加一</span></span><br><span class="line">    &#123;</span><br><span class="line">        ltt[p].cnt++; ltt[p].sum++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ltt[p].val&lt;x)<span class="comment">//要插入的点比这个点的数值要大</span></span><br><span class="line">    &#123;</span><br><span class="line">        insert(rs(p),x);<span class="comment">//向右跑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//相反后同上</span></span><br><span class="line">    &#123;</span><br><span class="line">        insert(ls(p),x);</span><br><span class="line">    &#125;</span><br><span class="line">    up(ltt[p],ltt[ls(p)],ltt[rs(p)]);<span class="comment">//IMPORTANT提升操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findth</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span><span class="comment">//查看某一个点(x)的排名</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//p不存在（空节点），排名为一</span></span><br><span class="line">    <span class="keyword">int</span> cc=ltt[ls(p)].sum;<span class="comment">//查找p节点的左子树的数量</span></span><br><span class="line">    <span class="keyword">if</span>(ltt[p].val==x)<span class="comment">//节点中的值和x点相同</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> cc+<span class="number">1</span>;<span class="comment">//比p小的所有数的数量+1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ltt[p].val&gt;x)<span class="comment">//节点中的值比x点大（向左子树跑）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> findth(ls(p),x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//节点中的值比x点小（向右子树跑）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> findth(rs(p),x)+cc+ltt[p].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findkth</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> k)</span><span class="comment">//查找k点的排名（第k大的数字）</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">int</span> cc=ltt[ls(p)].sum;</span><br><span class="line">    <span class="keyword">if</span>(cc&gt;=k) <span class="keyword">return</span> findkth(ls(p),k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(cc&lt;k &amp;&amp; cc+ltt[p].cnt&gt;=k) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> findkth(rs(p),k-cc-ltt[p].cnt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> ans)</span><span class="comment">//前驱</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(ltt[p].val&gt;=x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> pre(ls(p),x,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> pre(rs(p),x,max(ans,ltt[p].val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> ans)</span><span class="comment">//后继</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ans;</span><br><span class="line">    <span class="keyword">if</span>(ltt[p].val&lt;=x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> nxt(rs(p),x,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> nxt(ls(p),x,min(ans,ltt[p].val));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//插入无限小和无限大</span></span><br><span class="line">    insert(root,<span class="number">-0x7fffffff</span>);</span><br><span class="line">    insert(root,<span class="number">0x7fffffff</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,a,b;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;findth(root,b)<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ltt[findkth(root,b+<span class="number">1</span>)].val&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ans=pre(root,b,<span class="number">-0x7fffffff</span>);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ans=nxt(root,b,<span class="number">0x7fffffff</span>);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            insert(root,b);<span class="comment">//从根节点开始插入b</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上，本题较为复杂。但是要是仔细看看的话，其实难度也不大，就是要码的字实在是太多了QAQ</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P2390</title>
    <url>/2020/05/26/P2390/</url>
    <content><![CDATA[<h1 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h1><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>改编自USACO2007Nov铜组Exploration</p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>贝西在一条道路上旅行，道路上有许多地标，贝西想要在日落之前访问尽可能多的路标。将道路视为一条数轴，贝西从原点出发，道路上有n(1&lt;=n&lt;=50000)个地标，每个地标有一个坐标x[i](-100,000 ≤ xi ≤ 100,000)且地标的坐标各不相同，t(1≤ T ≤1000000000)分钟之后将会日落。</p>
<a id="more"></a>

<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行：两个整数t,n</p>
<p>第二行至第n+1行：地标的坐标x[i]</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，贝西能访问的最多的地标数</p>
<h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><figure class="highlight plain"><figcaption><span>#1</span></figcaption><table><tr><td class="code"><pre><span class="line">25 14</span><br><span class="line">16</span><br><span class="line">8</span><br><span class="line">-7</span><br><span class="line">3</span><br><span class="line">10</span><br><span class="line">-15</span><br><span class="line">-17</span><br><span class="line">6</span><br><span class="line">-12</span><br><span class="line">14</span><br><span class="line">-13</span><br><span class="line">2</span><br><span class="line">9</span><br><span class="line">-5</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>#1</span></figcaption><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>
<h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>贝西日落时不用回到原点。</p>
<hr>
<h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><p>代码部分参考@<a href="https://www.luogu.com.cn/user/130199">NiveusNix</a>的题解</p>
<p>由题意，想要最快捷地走更多的路，就不能有重复的路，因此分下面四种情况</p>
<ol>
<li><p>从原点一直往右走</p>
</li>
<li><p>从原点一直往左走</p>
</li>
<li><p>从原点往左走一段再往右走</p>
</li>
<li><p>从原点往右走一段再往左走</p>
</li>
</ol>
<p>首先，对输入数据进行排序。</p>
<p>其次，分类讨论：</p>
<p>第一种和第二种情况可以直接模拟过去</p>
<p>第三种和第四种则稍微麻烦一点点，需要使用二分来缩减范围。</p>
<ol>
<li><p>设定二分中点</p>
</li>
<li><p>算出当前所需要的时间（左边所需要的时间*2 + 右边所需要的时间（另外一种情况结论相反））</p>
</li>
<li><p>判断范围，继续二分 or 结束二分得出结果</p>
</li>
</ol>
<p>代码如下，含有注释。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t,n,s,L[<span class="number">50010</span>],R[<span class="number">50010</span>];<span class="comment">//L[]存在原点左边的地标离原点的距离，R[]存在原点右边的地标离原点的距离</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t&gt;&gt;n;</span><br><span class="line">    <span class="keyword">int</span> ll=<span class="number">0</span>,lr=<span class="number">0</span>,sum=<span class="number">0</span>;<span class="comment">//ll是左边最远地标离原点的距离，lr是右边最远地标离原点的距离</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//分类（原点左右）</span></span><br><span class="line">	&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">        <span class="keyword">if</span>(s==<span class="number">0</span>)</span><br><span class="line">		</span><br><span class="line">		&#123;</span><br><span class="line">        	sum=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			lr++;</span><br><span class="line">            R[lr]=s;           </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ll++;</span><br><span class="line">            L[ll]=-s;           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(L+<span class="number">1</span>,L+ll+<span class="number">1</span>);</span><br><span class="line">    sort(R+<span class="number">1</span>,R+lr+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> t3=<span class="number">0</span>,t4=<span class="number">0</span>,mt1=<span class="number">0</span>,mt2=<span class="number">0</span>,mt3=<span class="number">0</span>,mt4=<span class="number">0</span>;<span class="comment">//t3是第3种情况的子任务解，t4是第4种情况的子任务解，mt1-4是每种情况的最优解</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ll;i++)&#123;<span class="comment">//直接往右走</span></span><br><span class="line">        <span class="keyword">if</span>(L[i]&lt;=t)&#123;</span><br><span class="line">            mt1+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lr;i++)&#123;<span class="comment">//直接往左走</span></span><br><span class="line">        <span class="keyword">if</span>(R[i]&lt;=t)&#123;</span><br><span class="line">            mt2+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> le,ri,mid;<span class="comment">//临时左右分段，和二分中点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ll;i++)&#123;<span class="comment">//先枚举左边，回头向右走的坐标</span></span><br><span class="line">        le=<span class="number">1</span>;</span><br><span class="line">        ri=lr;</span><br><span class="line">        <span class="keyword">while</span>(ri&gt;=le)&#123;<span class="comment">//二分查找向右到达的坐标</span></span><br><span class="line">            mid=(ri+le)/<span class="number">2</span>;</span><br><span class="line">            t3=L[i]*<span class="number">2</span>+R[mid];<span class="comment">//算出当前所需要的时间</span></span><br><span class="line">    		<span class="keyword">if</span>(t3&gt;t)&#123;</span><br><span class="line">                ri=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                le=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mt3=max(mt3,i+ri);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=lr;i++)&#123;<span class="comment">//先枚举右边，回头向左走的坐标</span></span><br><span class="line">        le=<span class="number">1</span>;</span><br><span class="line">        ri=ll;</span><br><span class="line">        <span class="keyword">while</span>(ri&gt;=le)&#123;<span class="comment">//二分查找向左到达的坐标</span></span><br><span class="line">            mid=(ri+le)/<span class="number">2</span>;</span><br><span class="line">            t4=R[i]*<span class="number">2</span>+L[mid];<span class="comment">//算出当前所需要的时间</span></span><br><span class="line">            <span class="keyword">if</span>(t4&gt;t)&#123;</span><br><span class="line">                ri=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                le=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mt4=max(mt4,i+ri);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;max(max(mt1,mt2),max(mt3,mt4));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>SP18666 UVA1 - Radiation</title>
    <url>/2020/10/06/SP18666/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/SP18666">本题网址</a></p>
<p>数据点题目给得不好啊，可以<a href="https://www.luogu.com.cn/paste/kpiv47sn">参考这里</a></p>
<a id="more"></a>

<h2 id="输入样例解释"><a href="#输入样例解释" class="headerlink" title="输入样例解释"></a>输入样例解释</h2><p>这道题会无限读入Case，需要while循环来判断最后输入的“0”</p>
<p>一个case会出现这样的数据：</p>
<p>1 表示房屋数量n个</p>
<p>2 - n+1 表示房屋地址</p>
<p>n+2 输入两个核电站坐标并给出影响半径的个数k</p>
<p>n+3 - n+2+k 给出两个核电站的影响半径</p>
<p>之后的Case同样继续读入，直到输入“0”时停止读入</p>
<h2 id="输出样例解释"><a href="#输出样例解释" class="headerlink" title="输出样例解释"></a>输出样例解释</h2><p>输出数据格式很简单，直接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case 1:</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">Case 2:</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">..</span><br><span class="line">..</span><br></pre></td></tr></table></figure>
<h2 id="本题思路"><a href="#本题思路" class="headerlink" title="本题思路"></a>本题思路</h2><p>这是一道模拟题，难度一般，用心做能做出来</p>
<p>先是while无限输入，然后读入房屋坐标和加油站坐标，直接记录好每个房屋和两个加油站的距离，剪枝优化。这样的话可以避免之后每个循环进行计算。然后对距离进行排序，可以方便计算与半径的距离并且快速舍去后续没有必要的计算。</p>
<p>接着是暴力比较半径的大小，是的话ans++</p>
<p>接下来看代码</p>
<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,xx1[<span class="number">200001</span>],yy1[<span class="number">200001</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> ress1,ress2;</span><br><span class="line">&#125;ak[<span class="number">200001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pp a,pp b)</span> </span>&#123; <span class="comment">//结构体排序</span></span><br><span class="line">	<span class="keyword">if</span>(a.ress1!=b.ress1) &#123;</span><br><span class="line">		<span class="keyword">return</span> a.ress1&lt;b.ress1;</span><br><span class="line">	&#125; </span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> a.ress2&lt;=b.ress2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hx1,hy1,r1,hx2,hy2,r2;</span><br><span class="line"><span class="comment">//hx1,hy1,r1分别为第一个核电站的横坐标、纵坐标和影响半径 hy1,hy2同理</span></span><br><span class="line"><span class="keyword">int</span> cases,ans,casejl;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">while</span>(n!=<span class="number">0</span>)<span class="comment">//进入无限循环</span></span><br><span class="line">	&#123;</span><br><span class="line">		casejl++;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Case %d:\n&quot;</span>,casejl);<span class="comment">//输出Case个数</span></span><br><span class="line">		ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;xx1[i],&amp;yy1[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;hx1&gt;&gt;hy1&gt;&gt;hx2&gt;&gt;hy2;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			ak[j].ress1=(xx1[j]-hx1)*(xx1[j]-hx1)+(yy1[j]-hy1)*(yy1[j]-hy1);<span class="comment">//两点坐标距离公式</span></span><br><span class="line">			ak[j].ress2=(xx1[j]-hx2)*(xx1[j]-hx2)+(yy1[j]-hy2)*(yy1[j]-hy2);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;cases;</span><br><span class="line">		sort(ak+<span class="number">1</span>,ak+<span class="number">1</span>+n,cmp);<span class="comment">//排序</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cases;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans=<span class="number">0</span>;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;r1,&amp;r2);</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(ak[j].ress1&lt;=r1*r1 &amp;&amp; ak[j].ress2&lt;=r2*r2)</span><br><span class="line">				&#123;</span><br><span class="line">					ans++;<span class="comment">//输出答案</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span>(ak[j].ress1&gt;r1*r1 &amp;&amp; ak[j].ress2&gt;r2*r2)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;<span class="comment">//因为排序过，可以直接跳过</span></span><br><span class="line">                &#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);<span class="comment">//输出本轮答案</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="本题难点"><a href="#本题难点" class="headerlink" title="本题难点"></a>本题难点</h2><ol>
<li>题目中的输入数据需要自己猜测（PS：这题目有毒吧。。）</li>
<li>排序优化</li>
<li>注意细节</li>
</ol>
<h2 id="题后小结"><a href="#题后小结" class="headerlink" title="题后小结"></a>题后小结</h2><p>第一个做出这题的是同学@TheUknownCreator，为我提供了题意解读，感谢帮助。顺便提醒此题没有必要进行快读，scanf速度足够解决本题。</p>
<p>顺便提供一下我和他一起编写出的<a href="https://www.luogu.com.cn/paste/hcnhp8t7">补充数据</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>P5318 【深基18.例3】查找文献</title>
    <url>/2020/06/06/P5318/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://i.loli.net/2020/06/06/kdHaLBXghPuobDw.png" alt="题目"></p>
<p><img src="https://i.loli.net/2020/06/06/g9ICd5N4Yu1xrRz.png" alt="数据"></p>
<a id="more"></a>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>重点有两点：</p>
<ol>
<li>使用vector建立无权有向图，并使用迭代器对图排序</li>
<li>深搜，访问节点，使用vis进行遍历序</li>
</ol>
<p>示例代码见下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">310000</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; M[maxn];<span class="comment">//建立图（不带边权）</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn];<span class="comment">//每个顶点是否被访问过（dfs的遍历序，规定每个顶点只能访问一次）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//深搜，访问一个节点x</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//把节点x输出</span></span><br><span class="line">    vis[x]=<span class="number">1</span>;<span class="comment">//设置节点x已经被访问</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M[x].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=M[x][i];<span class="comment">//节点x可以访问到的第i个节点</span></span><br><span class="line">        <span class="keyword">if</span>(!vis[t])<span class="comment">//节点没有被访问</span></span><br><span class="line">        &#123;</span><br><span class="line">            dfs(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//广搜</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;<span class="comment">//队列中记录访问到哪个节点</span></span><br><span class="line">    vis[x]=<span class="number">1</span>;<span class="comment">//记录节点已被访问</span></span><br><span class="line">    Q.push(x);</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> hd=Q.front();<span class="comment">//调用队列头</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;hd&lt;&lt;<span class="string">&quot; &quot;</span>;<span class="comment">//队列头出队</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M[hd].size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=M[hd][i];</span><br><span class="line">            <span class="keyword">if</span>(!vis[t])<span class="comment">//节点没有被访问</span></span><br><span class="line">            &#123;</span><br><span class="line">                Q.push(t);<span class="comment">//压入节点</span></span><br><span class="line">                vis[t]=<span class="number">1</span>;<span class="comment">//记录节点已被访问</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Q.pop();<span class="comment">//弹出队列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,a,b;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        M[a].push_back(b);<span class="comment">//M[a]多了一个元素b</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(M[i].begin(),M[i].end());<span class="comment">//对每一个顶点可到的点进行大小排序</span></span><br><span class="line">        <span class="comment">//        起始地址      结束地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>);<span class="comment">//dfs</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i]=<span class="number">0</span>;<span class="comment">//清空vis数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    bfs(<span class="number">1</span>);<span class="comment">//bfs</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>beta</title>
    <url>/2020/01/02/beta/</url>
    <content><![CDATA[<p>Beta Test Closed</p>
]]></content>
  </entry>
  <entry>
    <title>STL库 QUEUE入门</title>
    <url>/2020/11/03/c++_queue/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yuzh0816/yuzhehao2006.github.io/2020/11/03/c++_queue/1.jpg" alt="Queue"></p>
<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><ol>
<li><p>入队(push):在队列末尾加入一个元素，例如:q.push(x)</p>
</li>
<li><p>出队(pop):删除/弹出队列第一个元素，即队首元素，例如:q.pop()</p>
</li>
<li><p>访问队首元素(front):返回队列第一个元素，例如:q.front()</p>
</li>
<li><p>访问队尾元素(back):返回队列最后一个元素，即队尾元素，例如:q.back()</p>
</li>
<li><p>判断队列空(empty):判断队列是否为空，如果空，则返回true，否则返回false，例如:q.empty()</p>
</li>
<li><p>访问队列中元素的个数(size):返回队列元素个数，例如:q.size()</p>
</li>
</ol>
<hr>
<p>参考资料：</p>
<ol>
<li><a href="https://blog.csdn.net/qq_41822647/article/details/83718730">ガッシュ·ベル</a></li>
</ol>
]]></content>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
  <entry>
    <title>从零开始 Hexo博客搭建</title>
    <url>/2020/02/19/hexo-first-deploy/</url>
    <content><![CDATA[<h1 id="从零开始-Hexo博客搭建"><a href="#从零开始-Hexo博客搭建" class="headerlink" title="从零开始 Hexo博客搭建"></a>从零开始 Hexo博客搭建</h1><blockquote>
<p>Hexo是一款快速、简洁且高效的博客框架</p>
</blockquote>
<a id="more"></a>

<hr>
<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="Windows-篇"><a href="#Windows-篇" class="headerlink" title="Windows 篇"></a>Windows 篇</h3><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>进入nodejs中文网下载<a href="http://nodejs.cn/download/">nodejs</a>，32位64位安装包自选</p>
<p><img src="https://i.loli.net/2020/03/04/fv8qg1F5XlE3RSY.png" alt="nodejs download"></p>
<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p>进入git官网下载<a href="https://git-scm.com/download/">git</a>，直接下载Windows包</p>
<p><img src="https://i.loli.net/2020/02/19/PIHqCmcSkxOs4vL.png" alt="git download"></p>
<h3 id="Debian-Linux篇"><a href="#Debian-Linux篇" class="headerlink" title="Debian Linux篇"></a>Debian Linux篇</h3><h4 id="安装nodejs-1"><a href="#安装nodejs-1" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>同理，进入nodejs中文网下载<a href="http://nodejs.cn/download/">nodejs</a>,根据环境选择安装源码</p>
<p><img src="https://i.loli.net/2020/02/19/8Qhwg5DTOEGtjSN.png" alt="nodejs download"></p>
<p>我这里是树莓派4B，选择ARM v7，复制下载链接。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">wget https://npm.taobao.org/mirrors/node/v12.16.0/node-v12.16.0-linux-armv7l.tar.xz</span><br></pre></td></tr></table></figure>
<p>然后解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压并移动位置</span></span><br><span class="line">tar -xvf node-v12.16.0-linux-armv7l.tar.xz -C /usr/local/</span><br></pre></td></tr></table></figure>
<p>进入目录并改名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">mv node-v5.10.1-linux-x64/ nodejs</span><br></pre></td></tr></table></figure>
<p>创建硬链接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/nodejs/bin/node /usr/local/bin</span><br><span class="line">ln -s /usr/local/nodejs/bin/npm /usr/local/bin</span><br></pre></td></tr></table></figure>
<p>测试是否已安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>进入Terminal或者Powershell,使用npm下载Hexo</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果是Linux系统，请执行 ln -s /usr/local/nodejs/bin/npm /usr/local/bin 创建硬链接</p>
</blockquote>
<p>接下来，执行下列命令，创建Hexo源码包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下列&lt;folder&gt;请自行改名</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h2 id="Hexo基本操作"><a href="#Hexo基本操作" class="headerlink" title="Hexo基本操作"></a>Hexo基本操作</h2><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><ul>
<li>运行Hexo(默认4000端口)<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li>新建文章(存放在source/_posts中，以Markdown作为写作语言)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下列&lt;title&gt;请自行改名</span></span><br><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>新建页码(存放在source中)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下列&lt;title&gt;请自行改名</span></span><br><span class="line">hexo new page &lt;title&gt;</span><br></pre></td></tr></table></figure>
<h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><blockquote>
<p>Front-matter 是文件最上方以 — 分隔的区域，用于指定个别文件的变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 举例</span></span><br><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2020/1/1 00:00:00</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>下图展示了如何设置Front-matter</p>
<p><img src="https://i.loli.net/2020/02/19/iBEcsNvbnxTd5P4.png" alt="how to set front-matter"></p>
<p>这就是Hexo的博客的入门搭建啦！恭喜成功搭建的小伙伴们！</p>
<h2 id="最后-点赞，收藏！！"><a href="#最后-点赞，收藏！！" class="headerlink" title="最后:点赞，收藏！！"></a>最后:点赞，收藏！！</h2>]]></content>
  </entry>
  <entry>
    <title>如何将Hexo博客框架上传至Github Page，搭建免费个人主页</title>
    <url>/2020/02/20/hexo_git_deploy/</url>
    <content><![CDATA[<h1 id="如何将Hexo博客框架上传至Github-Page，搭建免费个人主页"><a href="#如何将Hexo博客框架上传至Github-Page，搭建免费个人主页" class="headerlink" title="如何将Hexo博客框架上传至Github Page，搭建免费个人主页"></a>如何将Hexo博客框架上传至Github Page，搭建免费个人主页</h1><blockquote>
<p>本文是前文<a href="https://blog.hexoian.cn/2020/02/19/hexo-first-deploy/">从零开始 Hexo博客搭建</a>的后续。</p>
</blockquote>
<a id="more"></a>

<h2 id="注册Github账号并新建Github-Page仓库"><a href="#注册Github账号并新建Github-Page仓库" class="headerlink" title="注册Github账号并新建Github Page仓库"></a>注册Github账号并新建Github Page仓库</h2><ol>
<li>进入<a href="https://github.com/">Github.com</a>注册，网站会给邮箱发一封邮件</li>
</ol>
<p><img src="https://i.loli.net/2020/02/20/GQX7YlVtx8d9ZO3.png" alt="Github 注册"></p>
<ol start="2">
<li>新建Github仓库，注意：仓库名必须为你的用户名！！</li>
</ol>
<p><img src="https://i.loli.net/2020/02/20/OADauy4iWV3bXd6.png" alt="新建Github 仓库"></p>
<h2 id="配置SSH，提高安全性"><a href="#配置SSH，提高安全性" class="headerlink" title="配置SSH，提高安全性"></a>配置SSH，提高安全性</h2><p>进入Terminal或Powershell，设置SSH</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面自行设置用于注册Github的邮箱，然后敲3下回车</span></span><br><span class="line">ssh-keygen -t rsa -C &quot;mail@mail.com&quot;</span><br></pre></td></tr></table></figure>
<p>你会得到如下图所示的密钥，不用管，说明成功了</p>
<p><img src="https://i.loli.net/2020/02/20/YGuUvAl4LEzHNIr.png" alt="SHA 256"></p>
<p>接下来进入用户目录/.ssh/id_rsa.pub（根据自己的电脑，Windows与Linux均适用），复制文档内容</p>
<p><img src="https://i.loli.net/2020/02/20/2kU3MXxmhsoaOZw.png" alt="id_rsa.pub"></p>
<p>接下来右上角进入Settings，左边栏SSH &amp; GPG Keys，New SSH Key，将之前复制的东西粘贴下来</p>
<p><img src="https://i.loli.net/2020/02/20/lnT2cGBXUhIeOQs.png" alt="SSH Key"></p>
<p>进入Terminal或Powershell，输入下面的命令测试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 会出现Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)?的提示，输入yes</span></span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<p>然后如果出现下图所示的提示，代表成功了！</p>
<p><img src="https://i.loli.net/2020/02/20/6OhiGfC8gNeWv1M.png" alt="successful authenticated"></p>
<p>接下来还差最后一步，配置账户名和邮箱</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yuzh0816&quot;</span><br><span class="line">git config --global user.email  &quot;2235943809@qq.com&quot;</span><br></pre></td></tr></table></figure>
<p>大功告成，我们已经拥有了完整的博客仓库配置！！</p>
<h2 id="修改博客配置，以成功上传至Github-Pages"><a href="#修改博客配置，以成功上传至Github-Pages" class="headerlink" title="修改博客配置，以成功上传至Github Pages"></a>修改博客配置，以成功上传至Github Pages</h2><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h3><p>进入博客根目录，编辑_config.yml，翻到最下面</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment"># repo 根据自己的账户来填写</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:yuzh0816/yuzh0816.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>如下图所示</p>
<p><img src="https://i.loli.net/2020/02/20/xtZsLaVupibFglR.png" alt="deploy"></p>
<h3 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d -g # 也可以hexo g -d</span><br><span class="line"><span class="meta">#</span><span class="bash"> hexo d : hexo deploy，部署Hexo</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> hexo g : hexo generate，生成博客</span></span><br></pre></td></tr></table></figure>
<h2 id="如何访问Github-Pages"><a href="#如何访问Github-Pages" class="headerlink" title="如何访问Github Pages"></a>如何访问Github Pages</h2><p>进入_____.github.io即可</p>
<p>恭喜看到这里的小伙伴们，又Get到新技能啦！</p>
<h2 id="最后-点赞，收藏，评论！！"><a href="#最后-点赞，收藏，评论！！" class="headerlink" title="最后:点赞，收藏，评论！！"></a>最后:点赞，收藏，评论！！</h2>]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
  <entry>
    <title>如何为你的树莓派安装一个好看的主题---Butterfly</title>
    <url>/2020/03/12/hexo_theme_butterfly/</url>
    <content><![CDATA[<h1 id="如何为你的树莓派安装一个好看的主题—Butterfly"><a href="#如何为你的树莓派安装一个好看的主题—Butterfly" class="headerlink" title="如何为你的树莓派安装一个好看的主题—Butterfly"></a>如何为你的树莓派安装一个好看的主题—Butterfly</h1><blockquote>
<p>本文是前文<a href="http://blog.hexoian.cn/2020/02/20/hexo-first-deploy/">从零开始 Hexo博客搭建</a>的后续。</p>
</blockquote>
<p>文章有参考主题<a href="https://jerryc.me/posts/21cfbf15/">作者的博客</a></p>
<a id="more"></a>

<h2 id="安装环境（一定要装！！！）"><a href="#安装环境（一定要装！！！）" class="headerlink" title="安装环境（一定要装！！！）"></a>安装环境（一定要装！！！）</h2><p>首先，cd至博客根目录</p>
<blockquote>
<p>注意，需要首先安装好Node.js和Git！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd blog # 此处的blog更改为你所设置的名称</span><br></pre></td></tr></table></figure>
<p>然后，安装cheerio和渲染器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install cheerio –save</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>可以选择标准版，git clone下来：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br></pre></td></tr></table></figure>
<p>也可以选择dev版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br></pre></td></tr></table></figure>
<p>最后，更改博客根目录_config.yml</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">theme: Butterfly</span><br></pre></td></tr></table></figure>
<p>当然，也可以自行选择平滑升级（我自己没用），执行下面代码后可以通过git pull升级，但是之后配置文件就需要改butterfly.yml了，看个人喜好自愿执行下面步骤</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp source/themes/Butterfly/_config.yml source/_data/butterfly.yml</span><br></pre></td></tr></table></figure>

<p>恭喜，安装完成！</p>
<hr>
<h2 id="进行页面设置"><a href="#进行页面设置" class="headerlink" title="进行页面设置"></a>进行页面设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags # 标签页</span><br><span class="line">hexo new page categories # 分类页</span><br><span class="line">hexo new page link # 友链页</span><br></pre></td></tr></table></figure>
<p>然后编辑界面文件</p>
<p>标签页：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano source/tags/index.md</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2020-03-01 00:00:00</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>
<p>分类页：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano source/categories/index.md</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>
<p>友链页：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano source/link/index.md</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">title: 友情链接</span><br><span class="line">date: 2018-06-07 22:17:49</span><br><span class="line">type: &quot;link&quot;</span><br></pre></td></tr></table></figure>
<p>配置友链</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano source/_data/link.yml</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">class:</span><br><span class="line">  class_name: 友情链接</span><br><span class="line">  link_list:</span><br><span class="line">    1:</span><br><span class="line">      name: xxx #名称</span><br><span class="line">      link: https://blog.xxx.com # 链接</span><br><span class="line">      avatar: https://xxxxx/avatar.png # 头像</span><br><span class="line">      descr: xxxxxxx # 描述</span><br><span class="line">    2: # 内容同下</span><br><span class="line">      name: xxxxxx</span><br><span class="line">      link: https://www.xxxxxxcn/</span><br><span class="line">      avatar: https://xxxxx/avatar.png</span><br><span class="line">      descr: xxxxxxx</span><br></pre></td></tr></table></figure>
<hr>
<p>到这里差不多就完成基本配置了，更多配置信息可以前往<a href="https://jerryc.me/posts/21cfbf15/">作者的博客</a>或者<a href="https://github.com/Molunerfinn/hexo-theme-melody">hexo-theme-melody</a>获取。</p>
<h2 id="最后，点赞、收藏！！"><a href="#最后，点赞、收藏！！" class="headerlink" title="最后，点赞、收藏！！"></a>最后，点赞、收藏！！</h2>]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
  <entry>
    <title>一句命令教你找到Linux中的特大文件</title>
    <url>/2020/03/25/linux_delete_large_file/</url>
    <content><![CDATA[<h1 id="一句命令教你找到Linux中的特大文件"><a href="#一句命令教你找到Linux中的特大文件" class="headerlink" title="一句命令教你找到Linux中的特大文件"></a>一句命令教你找到Linux中的特大文件</h1><blockquote>
<p>写这篇文章的原因是我在自己的服务器上发现空间爆满，最后好不容易才找到了一个奇葩的log文件，见图。<br><img src="https://i.loli.net/2020/03/25/aoBd1NTPAw86Lsb.png" alt="OHHHH！"><br><img src="https://i.loli.net/2020/03/25/zZHAlcvbh13GpB9.png" alt="log"></p>
</blockquote>
<a id="more"></a>

<h2 id="搜索特大文件位置"><a href="#搜索特大文件位置" class="headerlink" title="搜索特大文件位置"></a>搜索特大文件位置</h2><p>首先，cd至根目录。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">cd /</span><br></pre></td></tr></table></figure>
<p>然后进行搜索。注意，这里使用的是”du -h”命令，来查找当前目录的文件夹及文件的大小。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 开始搜索</span></span><br><span class="line">du -sh *</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/03/25/V9bWFfHhK6zyck8.png" alt="search"></p>
<p>然后进入这个文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd var</span><br></pre></td></tr></table></figure>
<p>同样，继续搜索文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/03/25/5W8viVunMbA9xwz.png" alt="search"></p>
<p>发现了log这个文件夹很可疑，进去看看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd log</span><br></pre></td></tr></table></figure>
<p>搜索文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -sh *</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/03/25/g3sM6pXGbSPIvjl.png" alt="search"></p>
<p>发现是apt这个文件夹的锅，进去继续搜索</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd apt</span><br><span class="line">du -sh *</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/03/25/5tbfakBOwluVicn.png" alt="final search"></p>
<p>居然是这样一个奇葩的log文件？？？</p>
<p>rm -rf 试试</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf term1.log</span><br></pre></td></tr></table></figure>
<p>看看硬盘占用~~</p>
<p><img src="https://i.loli.net/2020/03/25/gmeX1yhfnVWD3aR.png" alt="AWESOME"></p>
<p>Awesome~~  一下子掉了4G^_^</p>
<hr>
<p>文章结束了，求个回复或者收藏本站呗~~</p>
]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
  <entry>
    <title>Mark</title>
    <url>/2020/07/14/mark/</url>
    <content><![CDATA[<a id="more"></a>

<ol>
<li>Dijkstra(单源最短路径)</li>
<li>P4779  <a href="https://www.luogu.com.cn/problem/P4779">【模板】单源最短路径（标准版）</a></li>
</ol>
]]></content>
      <tags>
        <tag>计划表</tag>
      </tags>
  </entry>
  <entry>
    <title>如何利用本地服务器，解锁网易云音乐客户端变灰歌曲</title>
    <url>/2020/02/21/net_ease_unlock/</url>
    <content><![CDATA[<h1 id="侵权删！侵权删！侵权删！"><a href="#侵权删！侵权删！侵权删！" class="headerlink" title="侵权删！侵权删！侵权删！"></a>侵权删！侵权删！侵权删！</h1><h1 id="侵权请告示2235943809-qq-com，会立刻删除！"><a href="#侵权请告示2235943809-qq-com，会立刻删除！" class="headerlink" title="侵权请告示2235943809@qq.com，会立刻删除！"></a>侵权请告示<a href="mailto:2235943809@qq.com">2235943809@qq.com</a>，会立刻删除！</h1><h1 id="如何利用本地服务器，解锁网易云音乐客户端变灰歌曲"><a href="#如何利用本地服务器，解锁网易云音乐客户端变灰歌曲" class="headerlink" title="如何利用本地服务器，解锁网易云音乐客户端变灰歌曲"></a>如何利用本地服务器，解锁网易云音乐客户端变灰歌曲</h1><h2 id="安装nodejs及git"><a href="#安装nodejs及git" class="headerlink" title="安装nodejs及git"></a>安装nodejs及git</h2><p>前文已有提到，此处不再赘述。</p>
<p><a href="https://blog.hexoian.cn/2020/02/19/hexo-first-deploy/#%E5%AE%89%E8%A3%85nodejs-1">如何安装nodejs及git</a></p>
<h2 id="安装UnblockNeteaseMusic"><a href="#安装UnblockNeteaseMusic" class="headerlink" title="安装UnblockNeteaseMusic"></a>安装UnblockNeteaseMusic</h2><h3 id="Git-Clone-目标仓库"><a href="#Git-Clone-目标仓库" class="headerlink" title="Git Clone 目标仓库"></a>Git Clone 目标仓库</h3><p>进入Terminal或Powershell，输入如下命令Clone仓库内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/nondanee/UnblockNeteaseMusic.git</span><br><span class="line">cd UnblockNeteaseMusic</span><br></pre></td></tr></table></figure>
<p>获取网易云服务器地址，并复制下来，如下图所示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping music.163.com</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/02/21/j1I4TDflkzX8n9L.png" alt="ping"></p>
<p>使用node开启服务，-p后面的是端口号，自行设置，-f后面的是你获取到的ip地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node app.js -p 8000 -f 59.111.181.38</span><br></pre></td></tr></table></figure>
<p>等待数秒，你会看到下图的东西</p>
<p><img src="https://i.loli.net/2020/02/21/72OdpsMIHNh4e5o.png" alt="server running"></p>
<p>恭喜，成功90%</p>
<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><h3 id="Windows配置"><a href="#Windows配置" class="headerlink" title="Windows配置"></a>Windows配置</h3><h4 id="UWP网易云音乐"><a href="#UWP网易云音乐" class="headerlink" title="UWP网易云音乐"></a>UWP网易云音乐</h4><p>打开Powershell（以管理员身份运行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">checknetisolation loopbackexempt -a -n=&quot;1F8B0F94.122165AE053F_j2p0p5q0044a6&quot;</span><br></pre></td></tr></table></figure>
<p>成功后会显示OK</p>
<p><img src="https://i.loli.net/2020/02/21/2yGfdhKgq1NMX8a.png" alt="OK"></p>
<p>进入设置—网络与Internet—代理</p>
<ol>
<li><p>打开自动检测设置</p>
</li>
<li><p>输入你所用的代理服务器的IPv4地址与代理的端口号</p>
</li>
</ol>
<p><img src="https://i.loli.net/2020/02/21/XBT45AVpIky62cJ.png" alt="Proxy"></p>
<p>保存设置，重启网易云音乐即可</p>
<h4 id="Windows客户端"><a href="#Windows客户端" class="headerlink" title="Windows客户端"></a>Windows客户端</h4><p>进入网易云音乐—左下角设置—工具—自定义代理</p>
<p>服务器填代理服务器的IPv4地址，端口填代理服务器所用的端口即可</p>
<h3 id="Android配置"><a href="#Android配置" class="headerlink" title="Android配置"></a>Android配置</h3><p>我这里用的是荣耀畅玩6A，EMUI5.1，向上兼容。</p>
<ol>
<li><p>进入WLAN设置</p>
</li>
<li><p>长按服务器所在的Wifi，修改网络</p>
</li>
</ol>
<p><img src="https://i.loli.net/2020/02/21/DFvs9O4YK5HC3Mr.png" alt="修改网络"></p>
<ol start="3">
<li>显示高级选项</li>
</ol>
<p><img src="https://i.loli.net/2020/02/21/7dRVWBGxe8nQcCg.png" alt="高级选项"></p>
<ol start="4">
<li>设置自动代理，PAC地址为 http://&lt;服务器IP地址&gt;:&lt;端口号&gt;/proxy.pac</li>
</ol>
<p><img src="https://i.loli.net/2020/02/22/78mW5GhvK9do4IP.png" alt="PAC"></p>
<p>打开网易云音乐，成功！</p>
<h3 id="iPhone配置"><a href="#iPhone配置" class="headerlink" title="iPhone配置"></a>iPhone配置</h3><p>类似Android配置，不再赘述。</p>
<h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>恭喜，成功解锁网易云变灰歌曲！</p>
<h2 id="点赞，转发，收藏！！"><a href="#点赞，转发，收藏！！" class="headerlink" title="点赞，转发，收藏！！"></a>点赞，转发，收藏！！</h2>]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
  <entry>
    <title>如何为你的Linux装上宝塔面板5.9(稳定版)</title>
    <url>/2020/02/26/raspi_bt_install/</url>
    <content><![CDATA[<h1 id="如何为你的Linux装上宝塔面板5-9-稳定版"><a href="#如何为你的Linux装上宝塔面板5-9-稳定版" class="headerlink" title="如何为你的Linux装上宝塔面板5.9(稳定版)"></a>如何为你的Linux装上宝塔面板5.9(稳定版)</h1><blockquote>
<p>注意：已安装过非宝塔面板安装的Apache/Nginx/php/MySQL的系统不可安装！！</p>
</blockquote>
<blockquote>
<p>注意：32位操作系统请不要看了，宝塔不支持32位操作系统</p>
</blockquote>
<p>本文的安装环境是Ubuntu 18.04 LTS (armhf)，接下来的步骤都是以本安装环境为准，不同系统请自行更改。</p>
<a id="more"></a>

<h2 id="Ubuntu-18-04-LTS-安装"><a href="#Ubuntu-18-04-LTS-安装" class="headerlink" title="Ubuntu 18.04 LTS 安装"></a>Ubuntu 18.04 LTS 安装</h2><p>Ubuntu 18.04 LTS 安装（Ubuntu全系列以及Debian系统(包括Raspbian) 均可使用此方法进行安装）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/02/26/OjLWNutwGvYJmpD.png" alt="安装完成"></p>
<p>如上图所示即为安装完成（其他版本的安装见文底）</p>
<hr>
<p>通过浏览器进入宝塔面板（<IP>:8888）</p>
<p>接下来，会弹出一个窗口，允许安装，总共有5个软件，包括Apache，Nginx，php5，MySQL和Pure-Ftpd。安装时间会很长，大概两三个小时。由于我这里已经安装好了，就不演示了。</p>
<p>主页长这样</p>
<p><img src="https://i.loli.net/2020/02/26/vABHTcDqRmfyKIM.png" alt="index"></p>
<h2 id="其它系统安装"><a href="#其它系统安装" class="headerlink" title="其它系统安装"></a>其它系统安装</h2><ul>
<li>CentOS</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>
<ul>
<li>Fedora</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure>
<hr>
<p>恭喜，安装完成！！</p>
<p>最后，别忘了——</p>
<h2 id="评论，转载，收藏！"><a href="#评论，转载，收藏！" class="headerlink" title="评论，转载，收藏！"></a>评论，转载，收藏！</h2>]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用树莓派搭建可视化的aria2挂机下载器</title>
    <url>/2020/02/29/raspi_aria2_install/</url>
    <content><![CDATA[<h1 id="如何用树莓派搭建可视化的aria2挂机下载器"><a href="#如何用树莓派搭建可视化的aria2挂机下载器" class="headerlink" title="如何用树莓派搭建可视化的aria2挂机下载器"></a>如何用树莓派搭建可视化的aria2挂机下载器</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p><a href="https://blog.hexoian.cn/2020/02/19/hexo-first-deploy/#%E5%AE%89%E8%A3%85nodejs/">前文</a>已经提到，不再赘述</p>
<h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><p>只需安装宝塔即可，<a href="https://blog.hexoian.cn/2020/02/26/raspi_bt_install/">前文</a>已经提到，不再赘述</p>
<a id="more"></a>

<h3 id="aria2"><a href="#aria2" class="headerlink" title="aria2"></a>aria2</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install aria2</span><br></pre></td></tr></table></figure>
<h2 id="配置aria2"><a href="#配置aria2" class="headerlink" title="配置aria2"></a>配置aria2</h2><p>但是光aria2还不够，需要有aria2的配置文件并让aria2开机自启。按如下配置。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>创建配置文件及文件夹，进入nano编辑器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/aria2</span><br><span class="line">touch /etc/aria2/aria2.session</span><br><span class="line">nano /etc/aria2/aria2.conf</span><br></pre></td></tr></table></figure>
<p>编辑配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 文件保存相关 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件保存目录 此处文件保存目录自行设定</span></span><br><span class="line">dir=/srv/dev-disk-by-label-Kingston/Kingston/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用磁盘缓存, 0为禁用缓存, 需1.16以上版本, 默认:16M</span></span><br><span class="line">disk-cache=32M</span><br><span class="line"><span class="meta">#</span><span class="bash"> 断点续传</span></span><br><span class="line">continue=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件预分配方式, 能有效降低磁盘碎片, 默认:prealloc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 预分配所需时间: none &lt; falloc ? trunc &lt; prealloc</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> falloc和trunc则需要文件系统和内核支持</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NTFS建议使用falloc, EXT3/4建议trunc, MAC 下需要注释此项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">file-allocation=falloc</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 下载连接相关 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最大同时下载任务数, 运行时可修改, 默认:5</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-concurrent-downloads=5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同一服务器连接数, 添加时可指定, 默认:1</span></span><br><span class="line">max-connection-per-server=15</span><br><span class="line"><span class="meta">#</span><span class="bash"> 整体下载速度限制, 运行时可修改, 默认:0（不限制）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-overall-download-limit=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个任务下载速度限制, 默认:0（不限制）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-download-limit=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 整体上传速度限制, 运行时可修改, 默认:0（不限制）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-overall-upload-limit=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个任务上传速度限制, 默认:0（不限制）</span></span><br><span class="line"><span class="meta">#</span><span class="bash">max-upload-limit=0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用IPv6, 默认:<span class="literal">false</span></span></span><br><span class="line">disable-ipv6=true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最小文件分片大小, 添加时可指定, 取值范围1M -1024M, 默认:20M</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 假定size=10M, 文件为20MiB 则使用两个来源下载; 文件为15MiB 则使用一个来源下载</span></span><br><span class="line">min-split-size=10M</span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个任务最大线程数, 添加时可指定, 默认:5</span></span><br><span class="line">split=10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 进度保存相关 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从会话文件中读取下载任务</span></span><br><span class="line">input-file=/etc/aria2/aria2.session</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在Aria2退出时保存错误的、未完成的下载任务到会话文件</span></span><br><span class="line">save-session=/etc/aria2/aria2.session</span><br><span class="line"><span class="meta">#</span><span class="bash"> 定时保存会话, 0为退出时才保存, 需1.16.1以上版本, 默认:0</span></span><br><span class="line">save-session-interval=60</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># RPC相关设置 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用RPC, 默认:<span class="literal">false</span></span></span><br><span class="line">enable-rpc=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许所有来源, 默认:<span class="literal">false</span></span></span><br><span class="line">rpc-allow-origin-all=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许外部访问, 默认:<span class="literal">false</span></span></span><br><span class="line">rpc-listen-all=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> RPC端口, 仅当默认端口被占用时修改</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpc-listen-port=6800</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置的RPC授权令牌, v1.18.4新增功能, 取代 --rpc-user 和 --rpc-passwd 选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rpc-secret=&lt;TOKEN&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># BT/PT下载相关 ##</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当下载的是一个种子(以.torrent结尾)时, 自动开始BT任务, 默认:<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">follow-torrent=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端伪装, PT需要</span></span><br><span class="line">peer-id-prefix=-TR2770-</span><br><span class="line">user-agent=Transmission/2.77</span><br><span class="line"><span class="meta">#</span><span class="bash"> 强制保存会话, 即使任务已经完成, 默认:<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 较新的版本开启后会在任务完成后依然保留.aria2文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash">force-save=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 继续之前的BT任务时, 无需再次校验, 默认:<span class="literal">false</span></span></span><br><span class="line">bt-seed-unverified=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存磁力链接元数据为种子文件(.torrent文件), 默认:<span class="literal">false</span></span></span><br><span class="line">bt-save-metadata=true</span><br></pre></td></tr></table></figure>
<p>Ctrl+O保存然后Ctrl+X退出，刷新配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br></pre></td></tr></table></figure>
<h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><p>创建service服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano /etc/init.d/aria2c</span><br></pre></td></tr></table></figure>
<p>编辑service服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## BEGIN INIT INFO</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Provides:          aria2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Start:    remotefsnetwork</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Required-Stop:     remotefsnetwork</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default-Stop:      0 1 6</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Short-Description: Aria2 Downloader</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## END INIT INFO</span></span></span><br><span class="line"> </span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">start)</span><br><span class="line">    echo -n &quot;Starting aria2c&quot;</span><br><span class="line">    sudo aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">    echo -n &quot;Shutting down aria2c &quot;</span><br><span class="line">    killall aria2c</span><br><span class="line">;;</span><br><span class="line">restart)</span><br><span class="line">    # killall aria2c</span><br><span class="line">    sudo aria2c --conf-path=/etc/aria2/aria2.conf -D</span><br><span class="line"></span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>
<p>让服务变为可执行文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/init.d/aria2c</span><br></pre></td></tr></table></figure>
<p>完成！</p>
<hr>
<h2 id="搭建可视化界面webui-aria2"><a href="#搭建可视化界面webui-aria2" class="headerlink" title="搭建可视化界面webui-aria2"></a>搭建可视化界面webui-aria2</h2><p>首先，git clone下来webui-aria2并进入文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/ziahamza/webui-aria2.git</span><br><span class="line">cd webui-aria2-master</span><br></pre></td></tr></table></figure>
<p>然后，编辑配置文件，设置端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nano node-server.js</span><br></pre></td></tr></table></figure>
<p>下图所圈画的即为本地端口号，可自行修改。</p>
<p><img src="https://i.loli.net/2020/02/29/RQpPmWvg3qiYBxz.png" alt="aria2-webui-port"></p>
<p>修改完后，Ctrl+O保存然后Ctrl+X退出，运行node-server。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node node-server.js</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/02/29/MiOBPrhNvfy7RQs.png" alt="aria2-webui-server"></p>
<p>接下来，进入浏览器，输入&lt;服务器的IP地址&gt;:&lt;你设置的端口号&gt;，可看到如下所示的界面，恭喜，安装成功！</p>
<p><img src="https://i.loli.net/2020/02/29/PQYnbUktdsVLB9e.png" alt="aria2-webui-ui"></p>
]]></content>
      <tags>
        <tag>干货</tag>
      </tags>
  </entry>
  <entry>
    <title>如何为你宝贵的树莓派定做一个温控风扇</title>
    <url>/2020/02/25/raspi_smart_fan/</url>
    <content><![CDATA[<h1 id="如何为你宝贵的树莓派定做一个温控风扇"><a href="#如何为你宝贵的树莓派定做一个温控风扇" class="headerlink" title="如何为你宝贵的树莓派定做一个温控风扇"></a>如何为你宝贵的树莓派定做一个温控风扇</h1><blockquote>
<p>文章参考：<a href="https://yuerblog.cc/2018/10/31/raspberry3b-pi-pnp-smart-cooling-fan/">树莓派3B PNP三极管 智能温控风扇</a></p>
</blockquote>
<h2 id="需要的材料"><a href="#需要的材料" class="headerlink" title="需要的材料"></a>需要的材料</h2><blockquote>
<p>杜邦线</p>
</blockquote>
<p>需要所有的三种杜邦线——公对公、公对母、母对母。</p>
<blockquote>
<p>PNP三极管</p>
</blockquote>
<p>推荐TO-92型号的三极管，符合教程的需求。</p>
<blockquote>
<p>一个1kΩ的电阻</p>
</blockquote>
<p>推荐金属膜电阻，方便耐用。</p>
<a id="more"></a>

<h2 id="硬件安装"><a href="#硬件安装" class="headerlink" title="硬件安装"></a>硬件安装</h2><p>首先，熟悉一下TO-92的引脚分布图，下图是扁平的那一面。</p>
<p><img src="https://i.loli.net/2020/02/23/VOgl4SpUI6MJsBX.jpg" alt="TO-92"></p>
<p>然后，熟悉一下树莓派的GPIO引脚分布图</p>
<p><img src="https://shumeipai.nxez.com/wp-content/uploads/2015/03/rpi-pins-40-0.png" alt="GPIO，图源见水印"></p>
<p>首先，用杜邦线把树莓派的5V和风扇的红线接到一起，电就走到风扇正极了，但此时电路还没接地，没有电流通过。</p>
<p>再拿一个杜邦线，把风扇的黑线和三极管的发射级（Emitter）接到一起，这样电就从风扇走到了三极管了。</p>
<p>再拿一根杜邦线，把三极管的集电级（Collector）和树莓派的GND地线（BOARD编码为6、9、14、20、25、30、34、39，随便选一个）接在一起，这样电就流经三极管到达地面了，电通路就完整了。</p>
<p>但是此时风扇不会转，因为PNP三极管默认是断开状态，除非给向它的基极（BASE）输出低电平。</p>
<h3 id="选择一（有钱人OR懒人）"><a href="#选择一（有钱人OR懒人）" class="headerlink" title="选择一（有钱人OR懒人）"></a>选择一（有钱人OR懒人）</h3><p>直接把三极管基极连到任意一个GPIO针脚上，完成。</p>
<ul>
<li>优势：省了一小步</li>
<li>劣势：三极管寿命会很短</li>
</ul>
<h3 id="选择二"><a href="#选择二" class="headerlink" title="选择二"></a>选择二</h3><p>拿出一根杜邦线，再拿1个1kΩ的电阻，把三极管基极和电阻接起来。</p>
<p>再拿出一根杜邦线，把电阻另一头和某个GPIO针脚连起来，我用的是18号（BCM编号）的GPIO针脚。</p>
<p>恭喜，硬件安装完成。</p>
<h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><h3 id="安装python以及pip"><a href="#安装python以及pip" class="headerlink" title="安装python以及pip"></a>安装python以及pip</h3><p>在Terminal中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install python</span><br><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure>
<h3 id="RPi-GPIO库"><a href="#RPi-GPIO库" class="headerlink" title="RPi.GPIO库"></a>RPi.GPIO库</h3><p>在Terminal中输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install RPi.GPIO</span><br></pre></td></tr></table></figure>
<p>创建一个Python文件：cool.py，记住文件的位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> RPi <span class="keyword">import</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超过40度启动</span></span><br><span class="line">upper_temp = <span class="number">40</span></span><br><span class="line"><span class="comment"># 低于35度关闭</span></span><br><span class="line">lower_temp = <span class="number">35</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 采用BCM引脚编号</span></span><br><span class="line">GPIO.setmode(GPIO.BCM)</span><br><span class="line"><span class="comment"># 关闭警告</span></span><br><span class="line">GPIO.setwarnings(<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 控制三级管的GPIO编号</span></span><br><span class="line">channel = <span class="number">18</span></span><br><span class="line"><span class="comment"># 初始GPIO输出高电平, 风扇不转</span></span><br><span class="line">GPIO.setup(channel, GPIO.OUT, initial = GPIO.HIGH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取树莓派温度的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_temp</span>():</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/sys/class/thermal/thermal_zone0/temp&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(fp.read()) / <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入检测</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 获取当前温度</span></span><br><span class="line">        temp = get_temp()</span><br><span class="line">        <span class="built_in">print</span> temp</span><br><span class="line">        <span class="comment"># 如果大于上限, 则给低电平, 闭合三极管</span></span><br><span class="line">        <span class="keyword">if</span> temp &gt;= upper_temp:</span><br><span class="line">            GPIO.output(channel, GPIO.LOW)</span><br><span class="line">        <span class="keyword">elif</span> temp &lt; lower_temp: <span class="comment"># 低于下限, 则给高电平, 断开三极管</span></span><br><span class="line">            GPIO.output(channel, GPIO.HIGH)</span><br><span class="line">        <span class="comment"># 每隔10秒检测1次</span></span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">    print(e)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置GPIO状态</span></span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure>
<p>接下来，在root账户下测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo su</span><br><span class="line">python3 cool.py</span><br></pre></td></tr></table></figure>
<p>出现如下图所示即为成功。</p>
<p><img src="https://i.loli.net/2020/02/25/3plbNGr4WMgsXjK.png" alt="test"></p>
<h2 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h2><p>进入Terminal，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务描述</span></span><br><span class="line">Description=smart fan</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 简单服务</span></span><br><span class="line">Type=simple</span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行用户与用户组</span></span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进程退出立即重启</span></span><br><span class="line">Restart=always</span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行命令，后面目录自行更改</span></span><br><span class="line">ExecStart=/usr/bin/python /root/cool.py</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在系统启动后加载UNIT</span></span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable pi-temp.service</span><br><span class="line">sudo systemctl start pi-temp.service</span><br></pre></td></tr></table></figure>
<p>恭喜，完成配置！</p>
<h2 id="最后-点赞，收藏，评论！！"><a href="#最后-点赞，收藏，评论！！" class="headerlink" title="最后:点赞，收藏，评论！！"></a>最后:点赞，收藏，评论！！</h2>]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>如何为你心爱的树莓派4B装上Ubuntu Server 18.04 LTS (armhf)</title>
    <url>/2020/02/22/raspi_ubuntu_deploy/</url>
    <content><![CDATA[<blockquote>
<p>前言：虽然Canonical已经发布了Ubuntu Server 18.04，但是驱动好像并不完善，而Arm64的软件源远不及Armhf，于是便有了这篇自己折腾出来的安装教程。</p>
</blockquote>
<blockquote>
<p>所需装备：一台树莓派4B，一张大于等于8G的SD卡，一根网线</p>
</blockquote>
<a id="more"></a>

<h2 id="下载Ubuntu并完成烧录"><a href="#下载Ubuntu并完成烧录" class="headerlink" title="下载Ubuntu并完成烧录"></a>下载Ubuntu并完成烧录</h2><h3 id="下载Ubuntu"><a href="#下载Ubuntu" class="headerlink" title="下载Ubuntu"></a>下载Ubuntu</h3><p>前往<a href="https://wiki.ubuntu.com/ARM/RaspberryPi">Ubuntu Wiki</a>，下载ubuntu-18.04.3-preinstalled-server-armhf+raspi3.img.xz</p>
<p><img src="https://i.loli.net/2020/02/22/U2osiMEFJ7DTeOv.png" alt=" ubuntu-18.04.3-preinstalled-server-armhf+raspi3.img.xz "></p>
<h3 id="烧录Ubuntu"><a href="#烧录Ubuntu" class="headerlink" title="烧录Ubuntu"></a>烧录Ubuntu</h3><h4 id="下载balelnaEtcher"><a href="#下载balelnaEtcher" class="headerlink" title="下载balelnaEtcher"></a>下载balelnaEtcher</h4><p>前往<a href="https://www.balena.io/etcher/">balenaEtcher官网</a>下载，版本自选。</p>
<p><img src="https://i.loli.net/2020/02/22/pQs5agCUucVvljM.png" alt="balelnaEtcher"></p>
<h4 id="烧录镜像文件"><a href="#烧录镜像文件" class="headerlink" title="烧录镜像文件"></a>烧录镜像文件</h4><p>注意备份！！烧录会格式化你的存储设备！！</p>
<ol>
<li>选择你下载的镜像文件</li>
<li>选择你的SD卡</li>
<li>Flash！</li>
</ol>
<p><img src="https://i.loli.net/2020/02/22/EhB5u32tDrdbcSF.png" alt="flash"></p>
<h2 id="覆盖原有驱动"><a href="#覆盖原有驱动" class="headerlink" title="覆盖原有驱动"></a>覆盖原有驱动</h2><ol>
<li>将原有boot分区文件删除</li>
<li>下载<a href="https://www.lanzous.com/i9kw4oj">boot驱动包</a></li>
<li>解压后把所有文件粘贴至boot分区</li>
</ol>
<p>完成！</p>
<h2 id="开机并远程ssh"><a href="#开机并远程ssh" class="headerlink" title="开机并远程ssh"></a>开机并远程ssh</h2><p>把SD卡插入树莓派，插电，插网线，启动。</p>
<p>等待约1分钟时间，进入路由器管理界面，有一台名为ubuntu的设备。记录下IP地址。</p>
<p><img src="https://i.loli.net/2020/02/22/C82FMv9WzxUodye.png" alt="Ubuntu IP"></p>
<p>打开Powershell，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh ubuntu@你记录到的IP</span><br></pre></td></tr></table></figure>
<p>初始密码为ubuntu，接下来按照提示操作。先输入一遍ubuntu，然后设置自己想要的密码。</p>
<h2 id="更换更新源"><a href="#更换更新源" class="headerlink" title="更换更新源"></a>更换更新源</h2><p>编辑文件/etc/apt/sources.list</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>输入内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse</span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 预发布软件源，不建议启用</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ bionic-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure>
<p>Ctrl+O保存，然后Ctrl+X退出。</p>
<p>更新软件及系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
<p>恭喜，成功在树莓派4B上安装Ubuntu Server 18.04！</p>
<h2 id="点赞，收藏，评论！！"><a href="#点赞，收藏，评论！！" class="headerlink" title="点赞，收藏，评论！！"></a>点赞，收藏，评论！！</h2>]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>教你用树莓派来搭建一个NAS数据中心</title>
    <url>/2020/05/10/rpi_nextcloud_deploy/</url>
    <content><![CDATA[<h1 id="教你用树莓派来搭建一个NAS数据中心"><a href="#教你用树莓派来搭建一个NAS数据中心" class="headerlink" title="教你用树莓派来搭建一个NAS数据中心"></a>教你用树莓派来搭建一个NAS数据中心</h1><a id="more"></a>

<div class="note info"><p>本文的NAS系统用的是Ubuntu 18.04 LTS + Nextcloud最新版本</p>
</div>

<h2 id="安装前配置"><a href="#安装前配置" class="headerlink" title="安装前配置"></a>安装前配置</h2><h3 id="安装宝塔"><a href="#安装宝塔" class="headerlink" title="安装宝塔"></a>安装宝塔</h3><p>宝塔的安装此处不在赘述，<a href="bt.cn">教程在此</a></p>
<h3 id="安装php-7-2及以上版本，推荐7-3或7-4"><a href="#安装php-7-2及以上版本，推荐7-3或7-4" class="headerlink" title="安装php 7.2及以上版本，推荐7.3或7.4"></a>安装php 7.2及以上版本，推荐7.3或7.4</h3><p>php可在宝塔中安装，非常简单</p>
<h3 id="安装Nginx或者Apache"><a href="#安装Nginx或者Apache" class="headerlink" title="安装Nginx或者Apache"></a>安装Nginx或者Apache</h3><p>同样可在宝塔软件中心中安装，但是Apache和Nginx只能安装一个，不可同时安装。配置差的机器推荐使用Nginx。</p>
<h3 id="安装Mysql"><a href="#安装Mysql" class="headerlink" title="安装Mysql"></a>安装Mysql</h3><p>版本根据机器配置自行选择，同理不再赘述。</p>
<h2 id="下载并安装Nextcloud"><a href="#下载并安装Nextcloud" class="headerlink" title="下载并安装Nextcloud"></a>下载并安装Nextcloud</h2><h3 id="下载Nextcloud"><a href="#下载Nextcloud" class="headerlink" title="下载Nextcloud"></a>下载Nextcloud</h3><p>前往<a href="https://hexoian.cn/resources/16/">Hexoian论坛</a>，下载Nextcloud源码包。</p>
<p>ps:速度会比官网下快不少哦</p>
<h3 id="安装Nextcloud"><a href="#安装Nextcloud" class="headerlink" title="安装Nextcloud"></a>安装Nextcloud</h3><p>在宝塔的网站管理中新建网站，数据库也可不新建，但如果新建了，要记住账户密码。</p>
<p><img src="https://i.loli.net/2020/05/07/uqoQ2p51bP7gIMx.png" alt="1.png"></p>
<p>进入网站根目录，把下载的文件解压进去，像这样</p>
<p><img src="https://i.loli.net/2020/05/07/VlA2fCHTJjnKyoQ.png" alt="2.png"></p>
<p>打开你所设置的ip以及端口，然后会看到这个东西</p>
<p><img src="https://i.loli.net/2020/05/07/AnxljVFWT1ocCIE.png" alt="3.png"></p>
<p>设置好你自己的用户名和密码，不用安装哪些捆绑应用。NC默认使用SQLite如果想用Mysql数据库来存放的话，下面数据库那里展开，填写你数据库的信息。</p>
<p>等待一会儿，然后可能会出错，重载下数据库配置，再重启下数据库，然后重启php，重启Apache或者Nginx，可能还会炸，重新注册个账号就能进了（名字要和之前不一样）</p>
<p>一切就绪，会直接进入Nextcloud。</p>
<p><img src="https://i.loli.net/2020/05/07/hSP2FsmpwM4BDIl.png" alt="4.png"></p>
<p><img src="https://i.loli.net/2020/05/07/9uHyI76CVGkZPc4.png" alt="5.png"></p>
<h2 id="安装完成！"><a href="#安装完成！" class="headerlink" title="安装完成！"></a>安装完成！</h2>]]></content>
      <tags>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>教你搭建一个专业的论坛系统---Xenforo</title>
    <url>/2020/04/01/xenforo_deploy/</url>
    <content><![CDATA[<div class="note warning"><p>本文资源包<a href="https://www.lanzous.com/iastpmj">点此下载</a>，密码为<strong>yuzh</strong></p>
</div>

<h1 id="教你搭建一个专业的论坛系统—Xenforo"><a href="#教你搭建一个专业的论坛系统—Xenforo" class="headerlink" title="教你搭建一个专业的论坛系统—Xenforo"></a>教你搭建一个专业的论坛系统—Xenforo</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装宝塔Linux面板"><a href="#安装宝塔Linux面板" class="headerlink" title="安装宝塔Linux面板"></a>安装宝塔Linux面板</h3><p>进入<a href="https://bt.cn">宝塔官网</a>，参考官网文档下载安装。</p>
<div class="note warning"><p>根据需要选择运行库！</p>
<a id="more"></a>

<p>MySql至少需为5.7，php至少需为7.3！！</p>
<p>如下图所示</p>
<p><img src="https://i.loli.net/2020/04/02/5UgycltGjp8dx7J.png" alt="运行库"></p>
</div>

<p><img src="" alt="安装环境"></p>
<div class="note success"><p>经过漫长的等待，等待安装完成</p>
</div>

<hr>
<h2 id="下载论坛资源包"><a href="#下载论坛资源包" class="headerlink" title="下载论坛资源包"></a>下载论坛资源包</h2><p>接下来，下载我打包的Xenforo包（有钱人请<a href="https://xenforo.com/">支持正版！！</a>），并放到你服务器上。</p>
<hr>
<h2 id="在宝塔内添加动态网站"><a href="#在宝塔内添加动态网站" class="headerlink" title="在宝塔内添加动态网站"></a>在宝塔内添加动态网站</h2><p>如下图所示，自行配置，要记住mysql的账号和密码（不记住也可，可以自己去找）</p>
<p><img src="https://i.loli.net/2020/04/02/HvfBCKjxsMOmklV.png" alt="新建网站"></p>
<div class="note warning"><p>端口一定要记住！！</p>
</div>

<hr>
<h2 id="导入网站资源包"><a href="#导入网站资源包" class="headerlink" title="导入网站资源包"></a>导入网站资源包</h2><p>将xenforo_2.1.8_Patch_1文件夹中的upload文件夹中的内容上传至网站的根目录（其实剪切过去更快），然后把upload文件夹中的内容剪切到根目录，结果如下图所示</p>
<p><img src="https://i.loli.net/2020/04/02/hzOu291DJTIjcHw.png" alt="install"></p>
<p>然后打开网站&lt;服务器IP&gt;:&lt;你之前设置的端口&gt;</p>
<p>打开后可能会有下面的提示，可以在宝塔中更改php的配置—禁用函数</p>
<p><img src="https://i.loli.net/2020/04/02/pm2l4TPy67DBbtM.png" alt="warning"></p>
<p>找到exec，proc_open，popen这三项，删掉，重启php服务。</p>
<p><img src="https://i.loli.net/2020/04/02/DI8whbylKMUjqin.png" alt="delete"></p>
<p>重新进入网站，成功！</p>
<p><img src="https://i.loli.net/2020/04/02/zJEtg2hAK8sFrc1.png" alt="success!!"></p>
<p>点击next，输入mysql的账户和密码</p>
<p><img src="https://i.loli.net/2020/04/02/i8fsg32MNT6nBoL.png" alt="账号密码"></p>
<p>点击Save config，然后Contiune，Begin Installation</p>
<p><img src="https://i.loli.net/2020/04/02/CPbo8nOlDKYVj1m.png" alt="processing..."></p>
<p>等待1-5分钟，输入管理员用户信息（自己设置），下一步Send anonymous server statistics 不用选，没有用。</p>
<p>最后，提示进入管理系统，自行登录。</p>
<div class="note success"><p>Xenforo安装成功</p>
</div>

<hr>
<h2 id="为Xenforo配置中文语言包"><a href="#为Xenforo配置中文语言包" class="headerlink" title="为Xenforo配置中文语言包"></a>为Xenforo配置中文语言包</h2><p>首先，进入论坛管理系统。</p>
<p>进入Appearance-Languages</p>
<p><img src="https://i.loli.net/2020/04/02/Vi5lhdprxtzuj2e.png" alt="language"></p>
<p>点击“浏览”，上传资源包中的XenforoChinesePACK.xml，然后单击“Import”。结束后，选择“简体中文”。</p>
<p><img src="https://i.loli.net/2020/04/02/3mrionYKcxjTJNC.png" alt="import"></p>
<div class="note success"><p>中文语言包安装成功</p>
</div>

<hr>
<p>然后，进入设置-选项-用户注册选项-为游客开启CAPTCHA，选择“使用问题 &amp; 回答 CAPTCHA”，然后单击“使用明确的问题”</p>
<p><img src="https://i.loli.net/2020/04/02/p7lJDdTUSyFNnfQ.png" alt="CAPTCHA"></p>
<p>设置好你自己的问题和答案，如下图所示。</p>
<p><img src="https://i.loli.net/2020/04/02/Q9xHYyRk5BM8I7s.png" alt="Q&amp;A"></p>
<p>最后，进入设置-选项-邮件系统选项，设置好你自己的邮件，然后进入工具-邮件发出测试，测试你设置的邮箱是否可用。</p>
<div class="note success"><p>配置成功！！</p>
</div>]]></content>
  </entry>
  <entry>
    <title>拓扑排序</title>
    <url>/2020/05/31/topological-sort/</url>
    <content><![CDATA[<h1 id="简单科普拓扑排序"><a href="#简单科普拓扑排序" class="headerlink" title="简单科普拓扑排序"></a>简单科普拓扑排序</h1><p>来源：<a href="https://baike.baidu.com/item/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/5223807?fr=aladdin">百度百科</a></p>
<p>对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边&lt;u,v&gt;∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。简单的说，由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序。</p>
<a id="more"></a>

<h1 id="手写笔记"><a href="#手写笔记" class="headerlink" title="手写笔记"></a>手写笔记</h1><p>举个栗子：</p>
<p>已知有课程1、2、3、4、5、6，且课程1、2完成后才可以完成课程3，课程三完成后才可以完成课程4、5，课程4、5完成后才可以完成课程6。</p>
<p>于是可得下面这幅拓扑排序图</p>
<p><img src="https://i.loli.net/2020/05/31/5JF2W36UHfOGZvD.png" alt="图一"></p>
<p><img src="https://i.loli.net/2020/05/31/Sa61mkWEND4X7KG.png" alt="图二"></p>
]]></content>
      <tags>
        <tag>科普</tag>
      </tags>
  </entry>
</search>
